program:
    | EOF
    | stmts EOF

stmts:
    | stmt*

stmt:
    | def id paren_id_list = stmts expr ;
    | let id = expr ;
	| type id = type_expr ;

paren_id_list:
    | ( [id [, id]*]? )

paren_expr_list:
    | ( [expr [, expr]*]? )

type_expr:
	| id
	| ( (type_expr id)* )
	| | type_expr

type hello =
	| int first
	| ( int second, int third ) world

type struct {
	int: hello
	struct {
		int: first
		int: second
	}: hello
	bool: world,
	enum {
		| first
		| second
		| third
	}: option
} : hello

type_pair:
	| id : type_expr

expr:
    | term
    | term + expr
    | term - expr

term:
    | factor
    | factor * term
    | factor / term

factor:
    | id paren_expr_list?
    | num
    | ( expr )
    | if epxr then expr else expr
	| - factor
