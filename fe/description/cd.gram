program:
    | EOF
    | stmts EOF

stmts:
    | stmt*

stmt:
    | def id paren_id_list = stmts expr ;
    | let id = expr ;
	| type id = type_expr ;
	| scope { stmts } ;

paren_id_list:
    | ( [id [, id]*]? )

paren_expr_list:
    | ( [expr [, expr]*]? )

type_expr:
	| id						// Primitive/Level 1 type
	| { [id : type_expr]* }		// Struct
	| { [ | id : type_expr ]* }	// Enum

expr:
    | term
    | term + expr
    | term - expr

term:
    | factor
    | factor * term
    | factor / term

factor:
    | id paren_expr_list?
    | num
    | ( expr )
    | if epxr then expr else expr
	| - factor
